# For this project, I downloaded Spotify data from Kaggle.
# Then I created a table to insert Spotify data into.
# Finally, I performed analytics on the data using SQL. 

#Creating the table: 
CREATE TABLE BIT_DB.Spotifydata (
id integer PRIMARY KEY,
artist_name varchar NOT NULL,
track_name varchar NOT NULL,
track_id varchar NOT NULL,
popularity integer NOT NULL,
danceability decimal(4,3) NOT NULL,
energy decimal(4,3) NOT NULL,
key integer NOT NULL,
loudness decimal(5,3) NOT NULL,
mode integer NOT NULL,
speechiness decimal(5,4) NOT NULL,
acousticness decimal(6,5) NOT NULL,
instrumentalness text NOT NULL,
liveness decimal(5,4) NOT NULL,
valence decimal(4,3) NOT NULL,
tempo decimal(6,3) NOT NULL,
duration_ms integer NOT NULL,
time_signature integer NOT NULL 
)

#Then I inserted the Spotify Data .csv into the table.

#Next, I explored the data using the following SQL. 

#1. Which artist appears most frequently in the dataset?

SELECT artist_name
, COUNT(track_name) as song_count
FROM BIT_DB.Spotifydata
GROUP BY artist_name
ORDER BY song_count desc
LIMIT 1
;

#2. What are the top 10 highest danceability scores, and which tracks and artists have it?

SELECT track_name, artist_name, danceability 
FROM BIT_DB.Spotifydata
ORDER BY danceability DESC
LIMIT 10
;

#3. Which songs have both high danceability (above 0.7) and high energy (above 0.7) but lower popularity (below 80)?

SELECT track_name
, artist_name
, danceability
, energy
, popularity 
FROM BIT_DB.Spotifydata
WHERE danceability > 0.7 
AND energy > 0.7 
AND popularity < 80
ORDER BY popularity desc
;

#4. What is the distribution of loudness levels by popularity?

SELECT popularity, AVG(loudness) AS avg_loudness
FROM BIT_DB.Spotifydata
GROUP BY popularity
ORDER BY popularity DESC
;

#5. Which artist wrote the longest song?

SELECT artist_name
, MAX(duration_ms)
FROM BIT_DB.Spotifydata
ORDER BY duration_ms desc
LIMIT 1
;


