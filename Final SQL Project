# In this project, I queried a dataset called chinook, which represents a digital media store and includes tables for artists, albums, media tracks, invoices, and customers.

#1. Show Customers (their full names, customer ID, and country) who are not in the US. (Hint: != or <> can be used to say "is not equal to").

SELECT FirstName
, LastName
, CustomerId
, Country
FROM chinook.customers
WHERE Country <> 'USA'
;

#2. Show only the Customers from Brazil.

SELECT *
FROM chinook.customers
WHERE Country = 'Brazil'
;

#3. Find the Invoices of customers who are from Brazil. The resulting table should show the customer's full name, Invoice ID, Date of the invoice, and billing country.

SELECT cust.FirstName
, cust.LastName
, inv.InvoiceId
, inv.InvoiceDate
, inv.BillingCountry
FROM chinook.invoices AS inv
LEFT JOIN chinook.customers AS cust
ON inv.CustomerId = cust.CustomerId
WHERE inv.BillingCountry = 'Brazil'
;

#4. Show the Employees who are Sales Agents.

SELECT *
FROM chinook.employees
WHERE Title = 'Sales Support Agent'
;

#5. Find a unique/distinct list of billing countries from the Invoice table.

SELECT distinct BillingCountry AS Countries
FROM chinook.invoices
;

#6. Provide a query that shows the invoices associated with each sales agent. The resulting table should include the Sales Agent's full name.

SELECT emp.FirstName
, emp.LastName
, inv.invoiceId
FROM chinook.Employees AS emp

INNER JOIN chinook.Customers AS cust
ON emp.EmployeeId = cust.SupportRepId

INNER JOIN chinook.invoices inv
ON inv.CustomerId = cust.CustomerId
;

#7. Show the Invoice Total, Customer name, Country, and Sales Agent name for all invoices and customers.

SELECT emp.FirstName
, emp.LastName
, cust.FirstName
, cust.LastName
, cust.Country
, inv.total
FROM chinook.employees emp

INNER JOIN chinook.customers cust
ON emp.EmployeeId = cust.SupportRepId

INNER JOIN chinook.invoices Inv
ON inv.CustomerID = cust.CustomerID
;

#8. How many Invoices were there in 2009?

SELECT COUNT(*)
FROM chinook.invoices
WHERE InvoiceDate
BETWEEN '2009-01-01' AND '2009-12-31'
;

#9. What are the total sales for 2009?

SELECT SUM(Total)
FROM chinook.Invoices
WHERE InvoiceDate
BETWEEN '2009-01-01' AND '2009-12-31'
;

#10. Write a query that includes the purchased track name with each invoice line ID.

SELECT t.Name
, i.InvoiceLineId
FROM chinook.Invoice_items AS i
INNER JOIN chinook.tracks AS t
ON i.InvoiceLineId = t.TrackId
;

#11. Write a query that includes the purchased track name AND artist name with each invoice line ID.

SELECT ar.name AS Artist
, t.Name AS Track
, i.InvoiceLineId
FROM chinook.Invoice_items i

LEFT JOIN chinook.tracks AS t
ON t.TrackId = i.TrackId

INNER JOIN chinook.albums AS a
ON a.AlbumId = t.AlbumId

LEFT JOIN chinook.artists ar
ON ar.ArtistID = a.ArtistID
;

#12. Provide a query that shows all the Tracks, and include the Album name, Media type, and Genre.

SELECT t.Name AS 'Track Name'
, a.Title AS 'Album Title'
, m.Name AS 'Media Type'
, g.Name AS 'Genre'
FROM chinook.tracks AS t

INNER JOIN chinook.albums AS a
ON a.AlbumId = t.AlbumId

INNER JOIN chinook.media_types AS m
ON m.MediaTypeId = t.MediaTypeId

INNER JOIN chinook.genres AS g
ON g.GenreId = t.GenreId
;

#13. Show the total sales made by each sales agent.

SELECT emp.FirstName
, emp.LastName
, ROUND(SUM(inv.total), 2) AS 'Total Sales'
FROM chinook.employees emp

INNER JOIN chinook.Customers AS cust
ON emp.employeeID = cust.SupportRepId

INNER JOIN chinook.invoices AS inv
ON inv.CustomerId = cust.CustomerID

WHERE emp.Title = 'Sales Support Agent'
GROUP BY emp.FirstName
;

#14. Which sales agent made the most dollars in sales in 2009?

SELECT emp.FirstName
, emp.LastName
, ROUND(SUM(inv.total), 2) AS 'Total Sales'
FROM chinook. employees emp

INNER JOIN chinook.Customers AS cust
ON emp.employeeID = cust.SupportRepId

INNER JOIN chinook.invoices AS inv
ON inv.CustomerID = cust.customerID

WHERE emp.Title = 'Sales Support Agent'
AND inv.InvoiceDate LIKE '%2009%'
GROUP BY emp.FirstName
ORDER BY ROUND(sum(inv.total), 2) desc
LIMIT 1
;

#15. Provide a query that shows all the tracks, the artists' names and the respective playlist's name.

SELECT distinct t.Name AS 'Track'
, ar.Name AS 'Artist'
, pl.Name AS 'Playlist'
FROM tracks AS t

INNER JOIN albums AS a
ON t.AlbumId = a.AlbumId

INNER JOIN artists AS ar
ON ar.ArtistId = a.ArtistId

INNER JOIN playlist_track AS pt
ON pt.TrackId = t.trackId

INNER JOIN playlists as pl
ON pl.PlaylistId = pt.PlaylistId

LIMIT 100
;


#16. Provide a query that shows all the artists' names, the albums' names and the genre. Group by genre.

SELECT distinct ar.Name AS 'Artist'
, al.Title AS 'Album'
, g.Name AS 'Genre'
FROM artists AS ar

INNER JOIN albums al
ON ar.ArtistId = al.ArtistId

INNER JOIN tracks AS t
ON t.AlbumId = al.AlbumId

INNER JOIN genres AS g
ON g.genreID = t.GenreID

LIMIT 100
;

#17. Provide a query that shows the number of invoices and the total revenue of the invoices by country for the year 2011.

SELECT COUNT(inv.InvoiceId) AS 'Orders'
, ROUND(SUM(inv.Total), 2) As 'Total Revenue'
, inv.BillingCountry AS 'Country'
FROM invoices AS inv
WHERE inv.invoiceDate LIKE '%2011%'
GROUP BY inv.BillingCountry
ORDER BY SUM(inv.Total) desc
;

#18. Select tracks, artists, and their media type and genre.

SELECT t.Name AS 'Track'
, al.Title AS 'Album'
, ar.Name AS 'Artist'
, g.Name AS 'Genre'
, m.Name AS 'Media Type'
FROM Tracks AS t

INNER JOIN albums AS al
ON t.AlbumId = al.AlbumId

INNER JOIN artists ar
ON ar.ArtistId = al.ArtistId

INNER JOIN genres AS g
ON g.GenreID = t.GenreID

INNER JOIN media_types AS m
ON m.MediaTypeId = t.MediaTypeId

LIMIT 100
;
